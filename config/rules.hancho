# matcheroni/config/rules.hancho

#-------------------------------------------------------------------------------

compile_cpp = hancho.command(
  desc        = "Compiling {rel_source_files} -> {rel_build_files} ({build_tag})",
  command     = "g++ {cpp_std} {gcc_opt} {warnings} {includes} {defines} -c {rel_source_files} -o {rel_build_files}",
  cpp_std     = "-std=c++20",
  gcc_opt     = "{'-O3' if build_tag == 'release' else '-g -O0'} -MMD",
  warnings    = "-Wall -Werror -Wno-unused-variable -Wno-unused-local-typedefs -Wno-unused-but-set-variable",
  includes    = "-I{repo_path}",
  defines     = "",
  build_files = "{swap_ext(source_files, '.o')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)

link_c_lib = hancho.command(
  desc        = "Bundling {rel_build_files}",
  command     = "ar rcs {rel_build_files} {rel_source_files}",
)

link_c_bin = hancho.command(
  desc        = "Linking {rel_build_files}",
  command     = "g++ {ld_opt} {warnings} {rel_source_files} {libs} {sys_libs} -o {rel_build_files}",
  ld_opt      = "{'-O3' if build_tag == 'release' else '-g -O0'}",
  libs        = "",
  sys_libs    = "",
  warnings    = "-Wall",
)

run_c_test = hancho.command(
  desc        = "Running test {rel_source_files}",
  command     = "rm -f {rel_build_files} && {rel_source_files} {args} && touch {rel_build_files}",
  build_files = "{swap_ext(source_files, '.pass')}",
  args        = "",
)

#-------------------------------------------------------------------------------

def compile_srcs(config, source_files):
  objs = []
  for file in hancho.flatten(source_files):
    if isinstance(file, hancho.Task):
      objs.append(file)
    else:
      objs.append(compile_cpp(file, config))
      pass
  return objs

def c_binary(config):
  source_files = config.pop("source_files")
  build_files  = config.pop("build_files")
  objs = compile_srcs(config, source_files)
  return link_c_bin(objs, build_files, config)

def c_library(config):
  source_files = config.pop("source_files")
  build_files  = config.pop("build_files")
  objs = compile_srcs(config, source_files)
  return link_c_lib(objs, build_files, config)

def c_test(config):
  return run_c_test(c_binary(config), config)

#-------------------------------------------------------------------------------

hancho.c_binary  = hancho.callback(c_binary)
hancho.c_library = hancho.callback(c_library)
hancho.c_test    = hancho.callback(c_test)
