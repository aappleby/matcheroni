# matcheroni/config/rules.hancho
from hancho import *

#-------------------------------------------------------------------------------

compile_cpp = Rule(
  desc       = "Compiling {files_in} -> {files_out} ({build_tag})",
  command    = "g++ {cpp_std} {gcc_opt} {warnings} {includes} {defines} -c {files_in} -o {files_out}",
  cpp_std    = "-std=c++20",
  gcc_opt    = "{'-O3' if build_tag == 'release' else '-g -O0'} -MMD",
  warnings   = "-Wall -Werror -Wno-unused-variable -Wno-unused-local-typedefs -Wno-unused-but-set-variable",
  includes   = "-I.",
  files_out  = "{swap_ext(files_in, '.o')}",
  depfile    = "{swap_ext(files_out, '.d')}",
)

link_c_lib = Rule(
  desc       = "Bundling {files_out}",
  command    = "ar rcs {files_out} {files_in}",
)

link_c_bin = Rule(
  desc       = "Linking {files_out}",
  command    = "g++ {ld_opt} {warnings} {files_in} {libs} {sys_libs} -o {files_out}",
  ld_opt     = "{'-O3' if build_tag == 'release' else '-g -O0'}",
  warnings   = "-Wall",
)

test_rule = Rule(
  desc       = "Running test {files_in}",
  command    = "rm -f {files_out} && {files_in} {args} && touch {files_out}",
  files_out  = "{files_in}_pass",
)

#-------------------------------------------------------------------------------

def compile_srcs(files_in, **kwargs):
  return [compile_cpp(f, **kwargs) for f in flatten(files_in)]

def c_binary(files_in, files_out, **kwargs):
  return link_c_bin(compile_srcs(files_in, **kwargs), files_out, **kwargs)

def c_library(files_in, files_out, **kwargs):
  return link_c_lib(compile_srcs(files_in, **kwargs), files_out, **kwargs)

def c_test(files_in, files_out, **kwargs):
  return test_rule(c_binary(files_in, files_out, **kwargs), **kwargs)


#-------------------------------------------------------------------------------
