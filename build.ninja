#-------------------------------------------------------------------------------
# Configuration

# Turning tracing on will generate _ton_ of spam in the C parser demo.
# Turning EXTRA_DEBUG on will generate even more spam.

### Debug build
#build_mode = -g -O0 -Wall -Werror -Wno-unused-variable -Wno-unused-local-typedefs -Wno-unused-but-set-variable
#defs = ${defs} -DMATCHERONI_ENABLE_TRACE
#defs = ${defs} -DEXTRA_DEBUG

### -Os needs stripping to minimize size
#build_mode = -Os -fdata-sections -ffunction-sections -Wl,--gc-sections -Wl,-s

### -O3 needs LTO to maximize performance
### -flto _doubles_ the speed of CLexer. :O
### -flto _halves_ the speed of Matcheroni's IP4 matcher, weird.
### LTO breaks "size obj/examples/json_parser.o"
build_mode = -g -flto -O3

includes = -I.

#include-what-you-use -Xiwyu --no_fwd_decls -std=c++20 -I. ${in}

#-------------------------------------------------------------------------------
# Rules

rule compile_cpp
  command = g++ -std=c++20 ${build_mode} ${defs} ${includes} -MMD -MF ${out}.d -c ${in} -o ${out}
  depfile = ${out}.d
  deps = gcc

rule compile_c
  command = gcc ${build_mode} ${includes} ${defs} -MMD -MF ${out}.d -c ${in} -o ${out}
  depfile = ${out}.d
  deps = gcc

rule static_lib
  command = ar rcs ${out} ${in} > /dev/null

rule link
  command = g++ -Wall ${build_mode} ${in} -lboost_system -lboost_regex -o ${out}

rule run_test
  command = ${in} >> /dev/null && touch ${out}

rule iwyu
  command = include-what-you-use -std=c++20 -I. ${in} && touch ${out} 2> /dev/null

#-------------------------------------------------------------------------------
# Tests

#build obj/matcheroni/Matcheroni.hpp.iwyu : iwyu matcheroni/Matcheroni.hpp
#build obj/matcheroni/Parseroni.hpp.iwyu  : iwyu matcheroni/Parseroni.hpp
#build obj/matcheroni/Utilities.hpp.iwyu  : iwyu matcheroni/Utilities.hpp

build obj/matcheroni/matcheroni_test.o : compile_cpp matcheroni/matcheroni_test.cpp
build bin/matcheroni/matcheroni_test   : link obj/matcheroni/matcheroni_test.o

build obj/matcheroni/parseroni_test.o  : compile_cpp matcheroni/parseroni_test.cpp
build bin/matcheroni/parseroni_test    : link obj/matcheroni/parseroni_test.o

build bin/matcheroni/matcheroni_test_pass : run_test bin/matcheroni/matcheroni_test
build bin/matcheroni/parseroni_test_pass  : run_test bin/matcheroni/parseroni_test

#-------------------------------------------------------------------------------
# Regex parser example

# These are the various regex libraries that Matcheroni can be ed
# against. CTRE and SRELL require that you copy their header into matcheroni/.

#benchmark_defs = ${benchmark_defs} -DREGEX_BENCHMARK_BASELINE
#benchmark_defs = ${benchmark_defs} -DREGEX_BENCHMARK_MATCHERONI
#benchmark_defs = ${benchmark_defs} -DREGEX_BENCHMARK_CTRE
#benchmark_defs = ${benchmark_defs} -DREGEX_BENCHMARK_BOOST
#benchmark_defs = ${benchmark_defs} -DREGEX_BENCHMARK_STD_REGEX
#benchmark_defs = ${benchmark_defs} -DREGEX_BENCHMARK_SRELL

# These defines are required to reduce the compiled size of the SRELL library used in the benchmark.
#benchmark_defs = ${benchmark_defs} -DSRELL_NO_UNICODE_ICASE -DSRELL_NO_UNICODE_PROPERTY -DSRELL_NO_UNICODE_DATA -DSRELL_NO_NAMEDCAPTURE -DSRELL_NO_VMODE

# This SRELL define seems to break things
#benchmark_defs = ${benchmark_defs} -DSRELL_NO_APIEXT

#defs = ${defs} ${benchmark_defs}

build obj/examples/regex/regex_parser.o : compile_cpp examples/regex/regex_parser.cpp
build obj/examples/regex/regex_demo.o   : compile_cpp examples/regex/regex_demo.cpp
build bin/examples/regex/regex_demo     : link obj/examples/regex/regex_parser.o obj/examples/regex/regex_demo.o

build obj/examples/regex/regex_benchmark.o : compile_cpp examples/regex/regex_benchmark.cpp
build bin/examples/regex/regex_benchmark   : link obj/examples/regex/regex_parser.o obj/examples/regex/regex_benchmark.o

#-------------------------------------------------------------------------------
# JSON parser example

build obj/examples/json/json_parser.o     : compile_cpp examples/json/json_parser.cpp
build obj/examples/json/json_demo.o       : compile_cpp examples/json/json_demo.cpp
build bin/examples/json/json_demo         : link obj/examples/json/json_parser.o obj/examples/json/json_demo.o

build obj/examples/json/json_benchmark.o  : compile_cpp examples/json/json_benchmark.cpp
build bin/examples/json/json_benchmark    : link obj/examples/json/json_parser.o obj/examples/json/json_benchmark.o

# json_demo = link(
#   compile_cpp(json_parser.cpp, json_demo.cpp),
# );
#
# json_benchmark = link(
#   compile_cpp(json_parser.cpp, json_benchmark.cpp),
# );

#-------------------------------------------------------------------------------
# Tutorial examples

build obj/tutorial/json_tut1a.o : compile_cpp tutorial/json_tut1a.cpp
build obj/tutorial/json_tut1b.o : compile_cpp tutorial/json_tut1b.cpp
build obj/tutorial/json_tut1c.o : compile_cpp tutorial/json_tut1c.cpp
build obj/tutorial/json_tut2a.o : compile_cpp tutorial/json_tut2a.cpp

build bin/tutorial/json_tut1a   : link obj/tutorial/json_tut1a.o
build bin/tutorial/json_tut1b   : link obj/tutorial/json_tut1b.o
build bin/tutorial/json_tut1c   : link obj/tutorial/json_tut1c.o
build bin/tutorial/json_tut2a   : link obj/tutorial/json_tut2a.o

build bin/tutorial/json_tut1a_pass : run_test bin/tutorial/json_tut1a
build bin/tutorial/json_tut1b_pass : run_test bin/tutorial/json_tut1b
build bin/tutorial/json_tut1c_pass : run_test bin/tutorial/json_tut1c
build bin/tutorial/json_tut2a_pass : run_test bin/tutorial/json_tut2a

#-------------------------------------------------------------------------------
# PNG example

build obj/examples/png/png_parser.o : compile_cpp examples/png/png_parser.cpp

#-------------------------------------------------------------------------------
# C lexer example (not finished)

build obj/examples/c_lexer/CLexer.o : compile_cpp examples/c_lexer/CLexer.cpp
build obj/examples/c_lexer/CToken.o : compile_cpp examples/c_lexer/CToken.cpp

build obj/examples/c_lexer.a : static_lib $
  obj/examples/c_lexer/CLexer.o $
  obj/examples/c_lexer/CToken.o

build obj/examples/c_lexer/c_lexer_test.o : compile_cpp examples/c_lexer/c_lexer_test.cpp
build bin/examples/c_lexer/c_lexer_test : $
link $
  obj/examples/c_lexer/c_lexer_test.o $
  obj/examples/c_lexer.a

build bin/examples/c_lexer/c_lexer_test_pass : run_test bin/examples/c_lexer/c_lexer_test

build obj/examples/c_lexer/c_lexer_benchmark.o : compile_cpp examples/c_lexer/c_lexer_benchmark.cpp
build bin/examples/c_lexer/c_lexer_benchmark : $
link $
  obj/examples/c_lexer/c_lexer_benchmark.o $
  obj/examples/c_lexer.a

#-------------------------------------------------------------------------------
# C parser example (not finished)

build obj/examples/c_parser/CNode.o    : compile_cpp examples/c_parser/CNode.cpp
build obj/examples/c_parser/CContext.o : compile_cpp examples/c_parser/CContext.cpp
build obj/examples/c_parser/CScope.o   : compile_cpp examples/c_parser/CScope.cpp

build obj/examples/c_parser.a : $
static_lib $
  obj/examples/c_parser/CContext.o $
  obj/examples/c_parser/CNode.o $
  obj/examples/c_parser/CScope.o

build obj/examples/c_parser/c_parser_test.o : compile_cpp examples/c_parser/c_parser_test.cpp
build bin/examples/c_parser/c_parser_test : $
link $
  obj/examples/c_parser/c_parser_test.o $
  obj/examples/c_lexer.a $
  obj/examples/c_parser.a

build bin/examples/c_parser/c_parser_test_pass  : run_test bin/examples/c_parser/c_parser_test

build obj/examples/c_parser/c_parser_benchmark.o : compile_cpp examples/c_parser/c_parser_benchmark.cpp
build bin/examples/c_parser/c_parser_benchmark : $
link $
  obj/examples/c_parser/c_parser_benchmark.o $
  obj/examples/c_lexer.a $
  obj/examples/c_parser.a

#-------------------------------------------------------------------------------

#build obj/c_parser/c_reference_hax.o : compile_cpp examples/c_parser/c_reference_hax.cpp
#build obj/c_parser/c_reference.o     : compile_cpp examples/c_parser/c_reference.cpp
